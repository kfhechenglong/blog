(window.webpackJsonp=window.webpackJsonp||[]).push([[146],{566:function(e,t,a){"use strict";a.r(t);var i=a(54),n=Object(i.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h3",{attrs:{id:"javascript-porting-of-markus-kuhn-s-wcwidth-implementation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-porting-of-markus-kuhn-s-wcwidth-implementation"}},[e._v("#")]),e._v(" Javascript porting of Markus Kuhn's wcwidth() implementation")]),e._v(" "),a("p",[e._v("The following explanation comes from the original C implementation:")]),e._v(" "),a("p",[e._v("This is an implementation of wcwidth() and wcswidth() (defined in\nIEEE Std 1002.1-2001) for Unicode.")]),e._v(" "),a("p",[e._v("http://www.opengroup.org/onlinepubs/007904975/functions/wcwidth.html\nhttp://www.opengroup.org/onlinepubs/007904975/functions/wcswidth.html")]),e._v(" "),a("p",[e._v('In fixed-width output devices, Latin characters all occupy a single\n"cell" position of equal width, whereas ideographic CJK characters\noccupy two such cells. Interoperability between terminal-line\napplications and (teletype-style) character terminals using the\nUTF-8 encoding requires agreement on which character should advance\nthe cursor by how many cell positions. No established formal\nstandards exist at present on which Unicode character shall occupy\nhow many cell positions on character terminals. These routines are\na first attempt of defining such behavior based on simple rules\napplied to data provided by the Unicode Consortium.')]),e._v(" "),a("p",[e._v("For some graphical characters, the Unicode standard explicitly\ndefines a character-cell width via the definition of the East Asian\nFullWidth (F), Wide (W), Half-width (H), and Narrow (Na) classes.\nIn all these cases, there is no ambiguity about which width a\nterminal shall use. For characters in the East Asian Ambiguous (A)\nclass, the width choice depends purely on a preference of backward\ncompatibility with either historic CJK or Western practice.\nChoosing single-width for these characters is easy to justify as\nthe appropriate long-term solution, as the CJK practice of\ndisplaying these characters as double-width comes from historic\nimplementation simplicity (8-bit encoded characters were displayed\nsingle-width and 16-bit ones double-width, even for Greek,\nCyrillic, etc.) and not any typographic considerations.")]),e._v(" "),a("p",[e._v("Much less clear is the choice of width for the Not East Asian\n(Neutral) class. Existing practice does not dictate a width for any\nof these characters. It would nevertheless make sense\ntypographically to allocate two character cells to characters such\nas for instance EM SPACE or VOLUME INTEGRAL, which cannot be\nrepresented adequately with a single-width glyph. The following\nroutines at present merely assign a single-cell width to all\nneutral characters, in the interest of simplicity. This is not\nentirely satisfactory and should be reconsidered before\nestablishing a formal standard in this area. At the moment, the\ndecision which Not East Asian (Neutral) characters should be\nrepresented by double-width glyphs cannot yet be answered by\napplying a simple rule from the Unicode database content. Setting\nup a proper standard for the behavior of UTF-8 character terminals\nwill require a careful analysis not only of each Unicode character,\nbut also of each presentation form, something the author of these\nroutines has avoided to do so far.")]),e._v(" "),a("p",[e._v("http://www.unicode.org/unicode/reports/tr11/")]),e._v(" "),a("p",[e._v("Markus Kuhn -- 2007-05-26 (Unicode 5.0)")]),e._v(" "),a("p",[e._v("Permission to use, copy, modify, and distribute this software\nfor any purpose and without fee is hereby granted. The author\ndisclaims all warranties with regard to this software.")]),e._v(" "),a("p",[e._v("Latest version: http://www.cl.cam.ac.uk/~mgk25/ucs/wcwidth.c")])])}),[],!1,null,null,null);t.default=n.exports}}]);