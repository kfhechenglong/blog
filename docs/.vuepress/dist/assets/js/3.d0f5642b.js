(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{400:function(t,s,a){t.exports=a.p+"assets/img/compiler.70b42f35.png"},401:function(t,s,a){t.exports=a.p+"assets/img/vue_compiler.589f4c22.png"},402:function(t,s,a){t.exports=a.p+"assets/img/parse.8cc3302a.png"},403:function(t,s,a){t.exports=a.p+"assets/img/status.46e0a79e.png"},404:function(t,s,a){t.exports=a.p+"assets/img/ast.a2cbfed2.png"},405:function(t,s,a){t.exports=a.p+"assets/img/ast1.e4173062.png"},406:function(t,s,a){t.exports=a.p+"assets/img/ast7.af5556c2.jpg"},407:function(t,s,a){t.exports=a.p+"assets/img/ast2.c47d48b7.png"},408:function(t,s,a){t.exports=a.p+"assets/img/ast3.2a172ce8.png"},409:function(t,s,a){t.exports=a.p+"assets/img/ast4.9df6827e.png"},410:function(t,s,a){t.exports=a.p+"assets/img/ast5.1a4c5793.png"},411:function(t,s,a){t.exports=a.p+"assets/img/ast6.a3f9b388.png"},412:function(t,s,a){t.exports=a.p+"assets/img/transform.f7064905.png"},413:function(t,s,a){t.exports=a.p+"assets/img/generate.2f45405d.png"},414:function(t,s,a){t.exports=a.p+"assets/img/compiler2.129740dd.png"},643:function(t,s,a){"use strict";a.r(s);var n=a(54),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"图解vue3-0编译器核心原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#图解vue3-0编译器核心原理"}},[t._v("#")]),t._v(" 图解vue3.0编译器核心原理")]),t._v(" "),n("h2",{attrs:{id:"概览"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#概览"}},[t._v("#")]),t._v(" 概览")]),t._v(" "),n("p",[n("code",[t._v("Vue.js")]),t._v("作为目前最流行的前端框架之一，一些概念和原理还是需要我们前端开发人员了解与深入理解的。")]),t._v(" "),n("p",[n("code",[t._v("Vue.js")]),t._v("涉及的知识点很多，一些重要概念，例如：如何使用"),n("code",[t._v("proxy")]),t._v("实现响应式"),n("code",[t._v("effect")]),t._v("，虚拟"),n("code",[t._v("DOM")]),t._v("的"),n("code",[t._v("Diff")]),t._v("算法及演变过程，渲染器原理的实现，编译器、解析器的工作原理，动态节点、静态提升等等；")]),t._v(" "),n("p",[t._v("现在重点采用图解步骤分析一下编译器的简单工作原理；")]),t._v(" "),n("h2",{attrs:{id:"编译器概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编译器概念"}},[t._v("#")]),t._v(" 编译器概念")]),t._v(" "),n("p",[t._v("编译器其实就是一段"),n("code",[t._v("JavaScript")]),t._v("代码程序，它将一种语言（"),n("code",[t._v("A")]),t._v("）编译成另外一种语言("),n("code",[t._v("B")]),t._v(")，其中前者"),n("code",[t._v("A")]),t._v("通常被叫做源代码，后者"),n("code",[t._v("B")]),t._v("通常被叫做为目标代码。例如我们vue的前端项目的"),n("code",[t._v(".vue")]),t._v("文件一般即为源代码，而编译后"),n("code",[t._v("dist")]),t._v("文件里的"),n("code",[t._v(".js")]),t._v("文件即为目标代码；这个过程就被称为编译（"),n("code",[t._v("compile")]),t._v("）")]),t._v(" "),n("h3",{attrs:{id:"关键概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关键概念"}},[t._v("#")]),t._v(" 关键概念")]),t._v(" "),n("p",[t._v("主要涉及的概念：")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("DSL")]),t._v(" 领域特定语言")]),t._v(" "),n("li",[n("code",[t._v("AST")]),t._v(" 抽象语法树（Abstract Syntax Tree）")]),t._v(" "),n("li",[t._v("有限状态机")]),t._v(" "),n("li",[t._v("深度优先算法")])]),t._v(" "),n("h2",{attrs:{id:"简单流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简单流程"}},[t._v("#")]),t._v(" 简单流程")]),t._v(" "),n("p",[t._v("一个标准的编译器流程如下图所示：\n"),n("img",{attrs:{src:a(400),alt:"在这里插入图片描述"}}),t._v(" "),n("code",[t._v("Vue.js")]),t._v("作为"),n("code",[t._v("DSL")]),t._v("，其编译流程会与上图有所不同，对于"),n("code",[t._v("Vue.js")]),t._v("来说，源代码就是组件的模板代码，而目标代码就是能够在浏览器（或其他平台）平台上运行的"),n("code",[t._v("JavaScript")]),t._v("代码。")]),t._v(" "),n("h2",{attrs:{id:"vue的编译器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue的编译器"}},[t._v("#")]),t._v(" Vue的编译器")]),t._v(" "),n("p",[n("code",[t._v("Vue.js")]),t._v("的目标代码其实就是渲染函数（"),n("code",[t._v("render")]),t._v("函数）。概况而言，"),n("code",[t._v("Vue.js")]),t._v("编译器首先对模板进行词法分析、语法分析，然后得到模板的抽象语法树（"),n("code",[t._v("AST")]),t._v("）。随后将模板"),n("code",[t._v("AST")]),t._v("转换成"),n("code",[t._v("JavaScript")]),t._v(" AST，最后再转换成"),n("code",[t._v("JavaScript")]),t._v("代码，及渲染函数。一个简单的Vue.js模板编译器的工作流如下：\n"),n("img",{attrs:{src:a(401),alt:"在这里插入图片描述"}})]),t._v(" "),n("p",[t._v("简单如下：\n模板代码")]),t._v(" "),n("div",{staticClass:"language-html extra-class"},[n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("h1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("vue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("vue_compiler"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("h1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),n("p",[t._v("目标的AST")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ast "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Root'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    children"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            type"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Element'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            tag"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'div'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            children"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    type"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Element'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    tag"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'h1'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    props"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n                        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                            type"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Attribute'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                            name"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'id'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                            content"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'vue'")]),t._v("\n                        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    children"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n                        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                            type"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Text'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                            content"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'vue_compiler'")]),t._v("\n                        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("目标代码")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'div'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'h1'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("id"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'vue'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'vue_compiler'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("由以上代码可以看出，"),n("code",[t._v("AST")]),t._v("其实就是一个具有层级结构的对象，模板的"),n("code",[t._v("AST")]),t._v("与模板具有相同的嵌套结构。每一颗"),n("code",[t._v("AST")]),t._v("都有一个逻辑上的根节点，其类型为"),n("code",[t._v("Root")]),t._v("，而模板中真正的根节点则作为"),n("code",[t._v("Root")]),t._v("节点的"),n("code",[t._v("children")]),t._v("存在。")]),t._v(" "),n("p",[t._v("观察"),n("code",[t._v("AST")]),t._v("可知：")]),t._v(" "),n("ul",[n("li",[t._v("不同类型的节点是通过节点的"),n("code",[t._v("type")]),t._v("属性进行区分的。")]),t._v(" "),n("li",[t._v("标签节点的子节点存储在其"),n("code",[t._v("children")]),t._v("数组中。")]),t._v(" "),n("li",[t._v("标签节点的属性节点会存储在"),n("code",[t._v("props")]),t._v("数组中。")]),t._v(" "),n("li",[t._v("不同类型的节点会使用不同的对象属性进行描述。")])]),t._v(" "),n("h2",{attrs:{id:"编译过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编译过程"}},[t._v("#")]),t._v(" 编译过程")]),t._v(" "),n("h3",{attrs:{id:"parse函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#parse函数"}},[t._v("#")]),t._v(" parse函数")]),t._v(" "),n("p",[n("code",[t._v("Vue.js")]),t._v("通过封装"),n("code",[t._v("parse")]),t._v("函数，实现对模板的词法分析和语法分析，最终得到模板的AST。"),n("code",[t._v("parse")]),t._v("函数接收模板字符串作为参数，并将解析后的"),n("code",[t._v("AST")]),t._v("作为返回值返回；")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" template "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n    <div>\n        <h1>vue<h1>\n    </div>\n")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" templateAst "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[n("img",{attrs:{src:a(402),alt:"在这里插入图片描述"}})]),t._v(" "),n("p",[t._v("解析器是如何对模板字符串进行分割的呢，此处就需要用到有限状态自动机。指的是在有限个状态之间，随着字符的输入，解析器会自动地在不同的状态之间进行切换。（实际上有限状态机是可以使用正则表达式来实现的）。")]),t._v(" "),n("p",[t._v("简单的状态机流程图：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(403),alt:"在这里插入图片描述"}})]),t._v(" "),n("p",[t._v("通过有限状态机原理，可一帮助我们完成对模板的标记，最终将得到一系列"),n("code",[t._v("Token")]),t._v("（词法标记号）。")]),t._v(" "),n("p",[t._v("假设有如下代码：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" template "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<div><span>Vue</span><p>Vue Compiler</p></div>")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 模板字符串")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过有限状态机原理实现词法分解得到三个Token")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 开始标签 <div>")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 文本节点 vue")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 结束标签 </div>")]),t._v("\n")])])]),n("p",[t._v("状态机的执行过程：状态机始于“初始状态 1”。")]),t._v(" "),n("ul",[n("li",[t._v("在“初始状态 1”下，读取模板的第一个字符"),n("code",[t._v("<")]),t._v("，状态机会进入下一个状态，即“标签开始状态 2”。")]),t._v(" "),n("li",[t._v("在“标签开始状态 2”下，读取下一个字符"),n("code",[t._v("div")]),t._v("。由于字符"),n("code",[t._v("d")]),t._v("是字母，所以状态机会进入“标签名称状态3”。")]),t._v(" "),n("li",[t._v("在“标签名称状态 3”下，读取下一个字符>，此时状态机会从“标签名称状态3”迁程回“初始状态1”，并记录在“标签名称状态”下产生的标签名称"),n("code",[t._v("div")])]),t._v(" "),n("li",[t._v("在“初始状态 1”下，读取下一个字符"),n("code",[t._v("<")]),t._v("，状态机会进入下一个状态，即“标签开始状态 2”")]),t._v(" "),n("li",[t._v("在“标签开始状态 2”下，读取下一个字符"),n("code",[t._v("span")]),t._v("。由于字符"),n("code",[t._v("s")]),t._v("是字母，所以状态机会进入“标签名称状态3”。")]),t._v(" "),n("li",[t._v("在“标签名称状态 3”下，读取下一个字符>，此时状态机会从“标签名称状态3”迁程回“初始状态1”，并记录在“标签名称状态”下产生的标签名称"),n("code",[t._v("span")])]),t._v(" "),n("li",[t._v("在“初始状态 1”下，读取下一个字符"),n("code",[t._v("V")]),t._v("，此时状态机会进入“文本状态 4”。")]),t._v(" "),n("li",[t._v("在“文本状态 4”下，继续读取后续字符，直到遇到字符"),n("code",[t._v("<")]),t._v("时，状态机会再次进入“标签开始状态 2”，并记录在“文本状态 4”下产生的文本内容，即字符串“Vue”。")]),t._v(" "),n("li",[t._v("在“标签开始状态2”下，读取下一个字符1，状态机会进入“结束标签状态 5”。")]),t._v(" "),n("li",[t._v("......循环读取......")]),t._v(" "),n("li",[t._v("在“结束标签名称状态6”下，读取最后一个字符"),n("code",[t._v(">")]),t._v("，它是结束标签的闭合字符，于是状态机迁移回“初始状态 1”，并记录在“结束标签名称状态 6”下生成的结束标签名称。\n经过这样一系列的状态迁移过程之后，我们最终就能够得到相应的"),n("code",[t._v("Token")]),t._v("了。以上就是一个简单的状态机的执行过程。")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最终值为")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" tokens "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("tokenize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     {")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//         type: 'tag', name: 'div'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     },")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     {")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//         type: 'tag', name: 'span'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     },")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     {")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//         type: 'text', name: 'Vue'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     },")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     {")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//         type: 'tagEnd', name: 'span'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     },")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     {")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//         type: 'tag', name: 'p'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     },")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     {")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//         type: 'text', name: 'Vue Compiler'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     },")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     {")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//         type: 'tagEnd', name: 'p'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     },")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     {")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//         type: 'tagEnd', name: 'div'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     }")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ]")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此代码需要生成的AST应为")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ast "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Root'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    children"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实际的根节点")]),t._v("\n            type"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Element'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            tag"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'div'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            children"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    type"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Element'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    tag"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'span'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    children"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n                        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                            type"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Text'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                            content"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Vue'")]),t._v("\n                        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    type"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Element'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    tag"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'p'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    children"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n                        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                            type"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Text'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                            content"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Vue Compiler'")]),t._v("\n                        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("以上代码生成的AST数据结构HTML结构相同，都是树状结构")]),t._v(" "),n("p",[n("img",{attrs:{src:a(404),alt:"在这里插入图片描述"}})]),t._v(" "),n("p",[t._v("接下来要做的就是将生成的"),n("code",[t._v("tokens")]),t._v("转换成"),n("code",[t._v("AST")]),t._v("，在转换过程中需要维护一个"),n("code",[t._v("Stack")]),t._v(",这个栈将用来维护元素间的父子关系。每到遇到一个开始标签，就创建一个"),n("code",[t._v("Element")]),t._v("类型的AST节点，并将其压入栈内，类似的，每当遇到一个结束标签节点，我们就将当前栈顶的节点弹出。这样栈顶的节点将始终充当父节点的角色。转换过程中的所有节点，都将作为当前栈顶节点的子节点，并添加到栈顶节点的"),n("code",[t._v("children")]),t._v("属性下。流程如下图示：")]),t._v(" "),n("p",[t._v("最初节点只有根节点Root")]),t._v(" "),n("p",[n("img",{attrs:{src:a(405),alt:"在这里插入图片描述"}})]),t._v(" "),n("p",[t._v("当扫描到第一个标签是开始节点是，因此我们创建一个类型为"),n("code",[t._v("Element")]),t._v("的AST节点"),n("code",[t._v("Element（div）")]),t._v("，并将该节点作为当前节点的子节点。由于当前的栈顶节点是"),n("code",[t._v("Root")]),t._v("节点，所以新创建的"),n("code",[t._v("Element（div）")]),t._v("节点作为"),n("code",[t._v("Root")]),t._v("节点的子节点被添加到"),n("code",[t._v("AST")]),t._v("中，最后将新建的"),n("code",[t._v("Element（div）")]),t._v("节点压入栈中。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(406),alt:"在这里插入图片描述"}})]),t._v(" "),n("p",[t._v("由于第二个节点也是一个开始标签，所以流程同上一步，只不过当前的栈顶节点为"),n("code",[t._v("Element（div）")]),t._v("，所以将当前的节点"),n("code",[t._v("Element（span）")]),t._v("作为其子节点添加到"),n("code",[t._v("AST")]),t._v("中，最后将"),n("code",[t._v("Element（div）")]),t._v("节点压入栈中。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(407),alt:"在这里插入图片描述"}})]),t._v(" "),n("p",[t._v("接下来的节点是一个文本节点，所以需要创建一个"),n("code",[t._v("Text")]),t._v("类型的"),n("code",[t._v("AST")]),t._v("节点，并将其作为栈顶节点"),n("code",[t._v("Element（span）")]),t._v("的子节点加入到AST中，不同的时，当前接待不是"),n("code",[t._v("Element")]),t._v("类型，所以不需要压入栈中；")]),t._v(" "),n("p",[n("img",{attrs:{src:a(408),alt:"在这里插入图片描述"}})]),t._v(" "),n("p",[t._v("下面是一个结束标签节点，根据规则，则需要将当前栈顶的节点弹出。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(409),alt:"在这里插入图片描述"}})]),t._v(" "),n("p",[t._v("后面的流程此处就不在累述")]),t._v(" "),n("p",[n("img",{attrs:{src:a(410),alt:"在这里插入图片描述"}})]),t._v(" "),n("p",[t._v("最终完成后的效果如下：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(411),alt:"在这里插入图片描述"}})]),t._v(" "),n("p",[t._v("现在我们来实现parse函数")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对模板进行词法分析，得到节点list")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" tokens "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("okenize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建跟节点")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" root "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        type"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Root'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        children"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建节点栈,root节点作为栈的根节点")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" stack "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tokens"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" parent "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" stack"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("stack"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" token "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tokens"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从第一个点开始")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'tag'")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" eleNode "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    type"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Element'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    tag"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    children"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                parent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("eleNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                stack"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("eleNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text'")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" textNode "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    type"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Text'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    content"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("content\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                parent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("textNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'tagEnd'")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 结束标签，将栈顶节点弹出栈")]),t._v("\n                stack"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("pop")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 消费掉已处理的节点")]),t._v("\n        tokens"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("shift")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("以上就是一个简版的parse函数的实现，当然相对于Vue.js的源码还有很多差异，但基本原理大致相同。")]),t._v(" "),n("p",[t._v("下面关于"),n("code",[t._v("transform")]),t._v("函数和"),n("code",[t._v("generate")]),t._v("函数仅做了简要说明，具体实现原理敬请期待；")]),t._v(" "),n("h3",{attrs:{id:"transform函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#transform函数"}},[t._v("#")]),t._v(" transform函数")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" template "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n    <div>\n        <h1>vue<h1>\n    </div>\n")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" templateAst "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" jsAst "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("transform")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("templateAst"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[n("img",{attrs:{src:a(412),alt:"在这里插入图片描述"}})]),t._v(" "),n("h3",{attrs:{id:"generate函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#generate函数"}},[t._v("#")]),t._v(" generate函数")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" template "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n    <div>\n        <h1>vue<h1>\n    </div>\n")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" templateAst "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" jsAst "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("transform")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("templateAst"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" code "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("generate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("jsAst"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[n("img",{attrs:{src:a(413),alt:"在这里插入图片描述"}})]),t._v(" "),n("h3",{attrs:{id:"完整流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#完整流程"}},[t._v("#")]),t._v(" 完整流程")]),t._v(" "),n("p",[t._v("以上就是"),n("code",[t._v("Vue")]),t._v("模板编译器的基本结构和工作流程，它主要有三个部分组成：")]),t._v(" "),n("ul",[n("li",[t._v("用来将模板字符串解析为模板"),n("code",[t._v("AST")]),t._v("的解析器（"),n("code",[t._v("parser")]),t._v("）;")]),t._v(" "),n("li",[t._v("用来将模板"),n("code",[t._v("AST")]),t._v("解析成"),n("code",[t._v("JavaScript AST")]),t._v("的转换器（"),n("code",[t._v("transformer")]),t._v("）；")]),t._v(" "),n("li",[t._v("用来根据"),n("code",[t._v("JavaScript AST")]),t._v("生成渲染函数代码的生成器（"),n("code",[t._v("generator")]),t._v("）；")])]),t._v(" "),n("p",[t._v("本文章主要讨论了"),n("code",[t._v("parser")]),t._v("的基本实现原理（实际上"),n("code",[t._v("Vue.js")]),t._v("的真正实现要复杂的多，比如正则解析、"),n("code",[t._v("Vue")]),t._v("语法解析"),n("code",[t._v("v-if")]),t._v("、"),n("code",[t._v("v-show")]),t._v("、内插值"),n("code",[t._v("{{}}")]),t._v("等等），以及如何使用有限状态自动机来构造一个词法分析器，其过程就是状态机在不同的状态之间进行迁移的过程，并生成一个"),n("code",[t._v("Token")]),t._v("列表集合。然后使用"),n("code",[t._v("Token")]),t._v("列表集合和顶节点元素栈来构造一个可以用来描述模板的"),n("code",[t._v("AST")]),t._v("，最后使用模板"),n("code",[t._v("AST")]),t._v("来解析成"),n("code",[t._v("JavaScript AST")]),t._v("和渲染函数。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(414),alt:"在这里插入图片描述"}})]),t._v(" "),n("h2",{attrs:{id:"参考"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),n("p",[t._v("Vue.js源码；")]),t._v(" "),n("p",[t._v("Vue.js设计与实现；")])])}),[],!1,null,null,null);s.default=e.exports}}]);