(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{469:function(t,e,s){"use strict";s.r(e);var r=s(54),a=Object(r.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"is-unicode-supported"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#is-unicode-supported"}},[t._v("#")]),t._v(" is-unicode-supported")]),t._v(" "),s("blockquote",[s("p",[t._v("Detect whether the terminal supports Unicode")])]),t._v(" "),s("p",[t._v("This can be useful to decide whether to use Unicode characters or fallback ASCII characters in command-line output.")]),t._v(" "),s("p",[t._v("Note that the check is quite naive. It just assumes all non-Windows terminals support Unicode and hard-codes which Windows terminals that do support Unicode. However, I have been using this logic in some popular packages for years without problems.")]),t._v(" "),s("h2",{attrs:{id:"install"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#install"}},[t._v("#")]),t._v(" Install")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ npm install is-unicode-supported\n")])])]),s("h2",{attrs:{id:"usage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#usage"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" isUnicodeSupported "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'is-unicode-supported'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isUnicodeSupported")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//=> true")]),t._v("\n")])])]),s("h2",{attrs:{id:"api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[t._v("#")]),t._v(" API")]),t._v(" "),s("h3",{attrs:{id:"isunicodesupported"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#isunicodesupported"}},[t._v("#")]),t._v(" isUnicodeSupported()")]),t._v(" "),s("p",[t._v("Returns a "),s("code",[t._v("boolean")]),t._v(" for whether the terminal supports Unicode.")]),t._v(" "),s("h2",{attrs:{id:"related"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#related"}},[t._v("#")]),t._v(" Related")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/sindresorhus/is-interactive",target:"_blank",rel:"noopener noreferrer"}},[t._v("is-interactive"),s("OutboundLink")],1),t._v(" - Check if stdout or stderr is interactive")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/chalk/supports-color",target:"_blank",rel:"noopener noreferrer"}},[t._v("supports-color"),s("OutboundLink")],1),t._v(" - Detect whether a terminal supports color")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/sindresorhus/figures",target:"_blank",rel:"noopener noreferrer"}},[t._v("figures"),s("OutboundLink")],1),t._v(" - Unicode symbols with Windows fallbacks")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/sindresorhus/log-symbols",target:"_blank",rel:"noopener noreferrer"}},[t._v("log-symbols"),s("OutboundLink")],1),t._v(" - Colored symbols for various log levels")])])])}),[],!1,null,null,null);e.default=a.exports}}]);