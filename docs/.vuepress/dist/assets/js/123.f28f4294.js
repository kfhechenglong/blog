(window.webpackJsonp=window.webpackJsonp||[]).push([[123],{548:function(e,t,r){"use strict";r.r(t);var a=r(54),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("p",[r("a",{attrs:{href:"https://travis-ci.org/isaacs/rimraf",target:"_blank",rel:"noopener noreferrer"}},[r("img",{attrs:{src:"https://travis-ci.org/isaacs/rimraf.svg?branch=master",alt:"Build Status"}}),r("OutboundLink")],1),e._v(" "),r("a",{attrs:{href:"https://david-dm.org/isaacs/rimraf",target:"_blank",rel:"noopener noreferrer"}},[r("img",{attrs:{src:"https://david-dm.org/isaacs/rimraf.svg",alt:"Dependency Status"}}),r("OutboundLink")],1),e._v(" "),r("a",{attrs:{href:"https://david-dm.org/isaacs/rimraf#info=devDependencies",target:"_blank",rel:"noopener noreferrer"}},[r("img",{attrs:{src:"https://david-dm.org/isaacs/rimraf/dev-status.svg",alt:"devDependency Status"}}),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("The "),r("a",{attrs:{href:"http://en.wikipedia.org/wiki/Rm_(Unix)",target:"_blank",rel:"noopener noreferrer"}},[e._v("UNIX command"),r("OutboundLink")],1),e._v(" "),r("code",[e._v("rm -rf")]),e._v(" for node.")]),e._v(" "),r("p",[e._v("Install with "),r("code",[e._v("npm install rimraf")]),e._v(", or just drop rimraf.js somewhere.")]),e._v(" "),r("h2",{attrs:{id:"api"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[e._v("#")]),e._v(" API")]),e._v(" "),r("p",[r("code",[e._v("rimraf(f, [opts], callback)")])]),e._v(" "),r("p",[e._v("The first parameter will be interpreted as a globbing pattern for files. If you\nwant to disable globbing you can do so with "),r("code",[e._v("opts.disableGlob")]),e._v(" (defaults to\n"),r("code",[e._v("false")]),e._v("). This might be handy, for instance, if you have filenames that contain\nglobbing wildcard characters.")]),e._v(" "),r("p",[e._v("The callback will be called with an error if there is one.  Certain\nerrors are handled for you:")]),e._v(" "),r("ul",[r("li",[e._v("Windows: "),r("code",[e._v("EBUSY")]),e._v(" and "),r("code",[e._v("ENOTEMPTY")]),e._v(" - rimraf will back off a maximum of\n"),r("code",[e._v("opts.maxBusyTries")]),e._v(" times before giving up, adding 100ms of wait\nbetween each attempt.  The default "),r("code",[e._v("maxBusyTries")]),e._v(" is 3.")]),e._v(" "),r("li",[r("code",[e._v("ENOENT")]),e._v(" - If the file doesn't exist, rimraf will return\nsuccessfully, since your desired outcome is already the case.")]),e._v(" "),r("li",[r("code",[e._v("EMFILE")]),e._v(" - Since "),r("code",[e._v("readdir")]),e._v(" requires opening a file descriptor, it's\npossible to hit "),r("code",[e._v("EMFILE")]),e._v(" if too many file descriptors are in use.\nIn the sync case, there's nothing to be done for this.  But in the\nasync case, rimraf will gradually back off with timeouts up to\n"),r("code",[e._v("opts.emfileWait")]),e._v(" ms, which defaults to 1000.")])]),e._v(" "),r("h2",{attrs:{id:"options"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#options"}},[e._v("#")]),e._v(" options")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("unlink, chmod, stat, lstat, rmdir, readdir,\nunlinkSync, chmodSync, statSync, lstatSync, rmdirSync, readdirSync")]),e._v(" "),r("p",[e._v("In order to use a custom file system library, you can override\nspecific fs functions on the options object.")]),e._v(" "),r("p",[e._v("If any of these functions are present on the options object, then\nthe supplied function will be used instead of the default fs\nmethod.")]),e._v(" "),r("p",[e._v("Sync methods are only relevant for "),r("code",[e._v("rimraf.sync()")]),e._v(", of course.")]),e._v(" "),r("p",[e._v("For example:")]),e._v(" "),r("div",{staticClass:"language-javascript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-javascript"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" myCustomFS "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("require")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[e._v("'some-custom-fs'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n"),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("rimraf")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[e._v("'some-thing'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" myCustomFS"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" callback"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])])]),e._v(" "),r("li",[r("p",[e._v("maxBusyTries")]),e._v(" "),r("p",[e._v("If an "),r("code",[e._v("EBUSY")]),e._v(", "),r("code",[e._v("ENOTEMPTY")]),e._v(", or "),r("code",[e._v("EPERM")]),e._v(" error code is encountered\non Windows systems, then rimraf will retry with a linear backoff\nwait of 100ms longer on each try.  The default maxBusyTries is 3.")]),e._v(" "),r("p",[e._v("Only relevant for async usage.")])]),e._v(" "),r("li",[r("p",[e._v("emfileWait")]),e._v(" "),r("p",[e._v("If an "),r("code",[e._v("EMFILE")]),e._v(" error is encountered, then rimraf will retry\nrepeatedly with a linear backoff of 1ms longer on each try, until\nthe timeout counter hits this max.  The default limit is 1000.")]),e._v(" "),r("p",[e._v("If you repeatedly encounter "),r("code",[e._v("EMFILE")]),e._v(" errors, then consider using\n"),r("a",{attrs:{href:"http://npm.im/graceful-fs",target:"_blank",rel:"noopener noreferrer"}},[e._v("graceful-fs"),r("OutboundLink")],1),e._v(" in your program.")]),e._v(" "),r("p",[e._v("Only relevant for async usage.")])]),e._v(" "),r("li",[r("p",[e._v("glob")]),e._v(" "),r("p",[e._v("Set to "),r("code",[e._v("false")]),e._v(" to disable "),r("a",{attrs:{href:"http://npm.im/glob",target:"_blank",rel:"noopener noreferrer"}},[e._v("glob"),r("OutboundLink")],1),e._v(" pattern\nmatching.")]),e._v(" "),r("p",[e._v("Set to an object to pass options to the glob module.  The default\nglob options are "),r("code",[e._v("{ nosort: true, silent: true }")]),e._v(".")]),e._v(" "),r("p",[e._v("Glob version 6 is used in this module.")]),e._v(" "),r("p",[e._v("Relevant for both sync and async usage.")])]),e._v(" "),r("li",[r("p",[e._v("disableGlob")]),e._v(" "),r("p",[e._v("Set to any non-falsey value to disable globbing entirely.\n(Equivalent to setting "),r("code",[e._v("glob: false")]),e._v(".)")])])]),e._v(" "),r("h2",{attrs:{id:"rimraf-sync"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rimraf-sync"}},[e._v("#")]),e._v(" rimraf.sync")]),e._v(" "),r("p",[e._v("It can remove stuff synchronously, too.  But that's not so good.  Use\nthe async API.  It's better.")]),e._v(" "),r("h2",{attrs:{id:"cli"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cli"}},[e._v("#")]),e._v(" CLI")]),e._v(" "),r("p",[e._v("If installed with "),r("code",[e._v("npm install rimraf -g")]),e._v(" it can be used as a global\ncommand "),r("code",[e._v("rimraf <path> [<path> ...]")]),e._v(" which is useful for cross platform support.")]),e._v(" "),r("h2",{attrs:{id:"mkdirp"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mkdirp"}},[e._v("#")]),e._v(" mkdirp")]),e._v(" "),r("p",[e._v("If you need to create a directory recursively, check out\n"),r("a",{attrs:{href:"https://github.com/substack/node-mkdirp",target:"_blank",rel:"noopener noreferrer"}},[e._v("mkdirp"),r("OutboundLink")],1),e._v(".")])])}),[],!1,null,null,null);t.default=s.exports}}]);